<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Page Not Found | 404 Error</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            background-size: 400% 400%;
            animation: gradientBG 15s ease infinite;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            overflow: hidden;
            padding: 20px;
        }

        @keyframes gradientBG {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .container {
            text-align: center;
            max-width: 800px;
            padding: 2rem;
            background: rgba(0, 0, 0, 0.7);
            border-radius: 20px;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.4);
            position: relative;
            overflow: hidden;
            z-index: 1;
        }

        .container::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 70%);
            z-index: -1;
        }

        .error-code {
            font-size: 6rem;
            font-weight: 900;
            line-height: 1;
            margin-bottom: 1rem;
            text-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        h1 {
            font-size: 2rem;
            margin-bottom: 1rem;
            color: #fdbb2d;
        }

        p {
            font-size: 1.1rem;
            margin-bottom: 2rem;
            line-height: 1.6;
        }

        .btn {
            padding: 12px 30px;
            border-radius: 50px;
            text-decoration: none;
            font-weight: bold;
            transition: all 0.3s ease;
            display: inline-block;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            background: #1a2a6c;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 1rem;
            margin: 10px;
        }

        .btn:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
            background: #2a3a8c;
        }

        .game-container {
            background: rgba(0, 0, 0, 0.5);
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
            position: relative;
            height: 300px;
            overflow: hidden;
        }

        .game-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            font-size: 1.2rem;
        }

        .game-area {
            position: relative;
            width: 100%;
            height: 200px;
            background: rgba(26, 42, 108, 0.3);
            border-radius: 10px;
            overflow: hidden;
            border: 2px solid rgba(253, 187, 45, 0.5);
        }

        .player {
            position: absolute;
            bottom: 10px;
            width: 60px;
            height: 20px;
            background: #fdbb2d;
            border-radius: 10px;
            left: 50%;
            transform: translateX(-50%);
            transition: left 0.1s;
        }

        .falling-item {
            position: absolute;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: white;
            top: 0;
        }

        .caught-item {
            position: absolute;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: #fdbb2d;
            animation: fadeOut 1s forwards;
        }

        @keyframes fadeOut {
            to {
                opacity: 0;
                transform: scale(0);
            }
        }

        .game-over {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10;
            display: none;
        }

        .game-over h2 {
            color: #fdbb2d;
            margin-bottom: 20px;
        }

        .instructions {
            margin-top: 15px;
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.7);
        }

        @media (max-width: 768px) {
            .error-code {
                font-size: 4rem;
            }
            
            h1 {
                font-size: 1.5rem;
            }
            
            p {
                font-size: 1rem;
            }
            
            .game-container {
                height: 250px;
            }
            
            .game-area {
                height: 150px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="error-code">404</div>
        
        <h1>Oops! Page Not Found</h1>
        
        <p>While you're here, why not play a quick game?</p>
        
        <div class="game-container">
            <div class="game-info">
                <div>Score: <span id="score">0</span></div>
                <div>Time: <span id="time">30</span>s</div>
            </div>
            
            <div class="game-area" id="gameArea">
                <div class="player" id="player"></div>
                <div class="game-over" id="gameOver">
                    <h2>Game Over!</h2>
                    <p>Your final score: <span id="finalScore">0</span></p>
                    <button class="btn" id="restartBtn">Play Again</button>
                </div>
            </div>
            
            <div class="instructions">
                Use LEFT and RIGHT arrow keys to move the paddle and catch falling stars!
            </div>
        </div>
        
        <button class="btn" id="goHomeBtn">Go Home</button>
    </div>

    <script>
        // Game variables
        let score = 0;
        let timeLeft = 30;
        let gameInterval;
        let itemInterval;
        let gameActive = false;
        
        // DOM elements
        const gameArea = document.getElementById('gameArea');
        const player = document.getElementById('player');
        const scoreDisplay = document.getElementById('score');
        const timeDisplay = document.getElementById('time');
        const gameOverScreen = document.getElementById('gameOver');
        const finalScoreDisplay = document.getElementById('finalScore');
        const restartBtn = document.getElementById('restartBtn');
        const goHomeBtn = document.getElementById('goHomeBtn');
        
        // Player movement
        let playerPosition = 50; // Percentage from left
        
        document.addEventListener('keydown', (e) => {
            if (!gameActive) return;
            
            if (e.key === 'ArrowLeft' && playerPosition > 0) {
                playerPosition -= 5;
            } else if (e.key === 'ArrowRight' && playerPosition < 100) {
                playerPosition += 5;
            }
            
            player.style.left = `${playerPosition}%`;
        });
        
        // Create falling items
        function createFallingItem() {
            if (!gameActive) return;
            
            const item = document.createElement('div');
            item.classList.add('falling-item');
            
            // Random horizontal position
            const leftPos = Math.random() * 90 + 5; // 5% to 95%
            item.style.left = `${leftPos}%`;
            
            // Random size and color
            const size = Math.random() * 15 + 10; // 10px to 25px
            item.style.width = `${size}px`;
            item.style.height = `${size}px`;
            
            // Random color
            const colors = ['#fdbb2d', '#ffffff', '#1a2a6c', '#b21f1f'];
            const color = colors[Math.floor(Math.random() * colors.length)];
            item.style.background = color;
            
            gameArea.appendChild(item);
            
            // Animation
            let topPos = 0;
            const fallSpeed = Math.random() * 2 + 1; // 1px to 3px per frame
            
            function animateItem() {
                if (!gameActive) {
                    item.remove();
                    return;
                }
                
                topPos += fallSpeed;
                item.style.top = `${topPos}px`;
                
                // Check if caught
                const playerRect = player.getBoundingClientRect();
                const itemRect = item.getBoundingClientRect();
                
                if (
                    topPos + size >= gameArea.offsetHeight - player.offsetHeight - 10 &&
                    itemRect.left < playerRect.right &&
                    itemRect.right > playerRect.left
                ) {
                    // Item caught!
                    score += Math.round(size); // Bigger items give more points
                    scoreDisplay.textContent = score;
                    
                    // Create visual effect
                    const caughtEffect = document.createElement('div');
                    caughtEffect.classList.add('caught-item');
                    caughtEffect.style.left = `${itemRect.left - gameArea.getBoundingClientRect().left + size/2}px`;
                    caughtEffect.style.top = `${itemRect.top - gameArea.getBoundingClientRect().top + size/2}px`;
                    gameArea.appendChild(caughtEffect);
                    
                    // Remove item
                    item.remove();
                    return;
                }
                
                // Check if missed (hit bottom)
                if (topPos >= gameArea.offsetHeight) {
                    item.remove();
                    return;
                }
                
                requestAnimationFrame(animateItem);
            }
            
            animateItem();
        }
        
        // Game timer
        function updateTimer() {
            if (!gameActive) return;
            
            timeLeft--;
            timeDisplay.textContent = timeLeft;
            
            if (timeLeft <= 0) {
                endGame();
            }
        }
        
        // Start game
        function startGame() {
            score = 0;
            timeLeft = 30;
            scoreDisplay.textContent = score;
            timeDisplay.textContent = timeLeft;
            gameActive = true;
            gameOverScreen.style.display = 'none';
            
            // Clear any existing items
            document.querySelectorAll('.falling-item, .caught-item').forEach(el => el.remove());
            
            // Start game loops
            gameInterval = setInterval(updateTimer, 1000);
            itemInterval = setInterval(createFallingItem, 800);
        }
        
        // End game
        function endGame() {
            gameActive = false;
            clearInterval(gameInterval);
            clearInterval(itemInterval);
            
            finalScoreDisplay.textContent = score;
            gameOverScreen.style.display = 'flex';
        }
        
        // Event listeners
        restartBtn.addEventListener('click', startGame);
        goHomeBtn.addEventListener('click', () => {
            // alert('Redirecting to home page...');
            window.location.href = '/listings';
        });
        
        // Add ripple effect to buttons
        document.querySelectorAll('.btn').forEach(button => {
            button.addEventListener('click', (e) => {
                const ripple = document.createElement('span');
                const rect = button.getBoundingClientRect();
                const size = Math.max(rect.width, rect.height);
                const x = e.clientX - rect.left - size / 2;
                const y = e.clientY - rect.top - size / 2;
                
                ripple.style.width = ripple.style.height = `${size}px`;
                ripple.style.left = `${x}px`;
                ripple.style.top = `${y}px`;
                ripple.classList.add('ripple');
                
                button.appendChild(ripple);
                
                setTimeout(() => {
                    ripple.remove();
                }, 600);
            });
        });
        
        // Add ripple effect styles dynamically
        const style = document.createElement('style');
        style.textContent = `
            .ripple {
                position: absolute;
                border-radius: 50%;
                background: rgba(255, 255, 255, 0.7);
                transform: scale(0);
                animation: ripple-animation 0.6s linear;
            }
            
            @keyframes ripple-animation {
                to {
                    transform: scale(4);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);
        
        // Start the game automatically
        startGame();
    </script>
</body>
</html>